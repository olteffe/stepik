Early tasks missed. #TODO them later...maybe
2.1.1. Напишите программу, которая считывает со стандартного ввода целые числа, по одному числу в строке, и после
первого введенного нуля выводит сумму полученных на вход чисел.
2.1.2. В Институте биоинформатики между информатиками и биологами устраивается соревнование. Победителям соревнования
достанется большой и вкусный пирог. В команде биологов a человек, а в команде информатиков — b человек.
Нужно заранее разрезать пирог таким образом, чтобы можно было раздать кусочки пирога любой команде, выигравшей
соревнование, при этом каждому участнику этой команды должно достаться одинаковое число кусочков пирога. И так как не
хочется резать пирог на слишком мелкие кусочки, нужно найти минимальное подходящее число.
Напишите программу, которая помогает найти это число.
Программа должна считывать размеры команд (два положительных целых числа a и b, каждое число вводится на отдельной
строке) и выводить наименьшее число d, которое делится на оба этих числа без остатка.
2.2.1. Напишите программу, которая считывает целые числа с консоли по одному числу в строке.
Для каждого введённого числа проверить:
если число меньше 10, то пропускаем это число;
если число больше 100, то прекращаем считывать числа;
в остальных случаях вывести это число обратно на консоль в отдельной строке.
2.3.1. Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками. Для тренировок ему бы очень
пригодилась программа, которая показывала бы блок таблицы умножения.
Напишите программу, на вход которой даются четыре числа a, b, c и d, каждое в своей строке. Программа должна
вывести фрагмент таблицы умножения для всех чисел отрезка [a;b] на все числа отрезка [c;d].
Числа a, b, c и d являются натуральными и не превосходят 10, a ≤ b, c ≤ d.
Следуйте формату вывода из примера, для разделения элементов внутри строки используйте '\t' — символ табуляции.
Заметьте, что левым столбцом и верхней строкой выводятся сами числа из заданных отрезков — заголовочные столбец и
строка таблицы.
2.3.2. Напишите программу, которая считывает с клавиатуры два числа a и b, считает и выводит на консоль среднее
арифметическое всех чисел из отрезка [a;b], которые делятся на 3.
В приведенном ниже примере среднее арифметическое считается для чисел на отрезке [−5;12]. Всего чисел, делящихся на
3, на этом отрезке 6: −3,0,3,6,9,12. Их среднее арифметическое равно 4.5.
На вход программе подаются интервалы, внутри которых всегда есть хотя бы одно число, которое делится на 3.
2.4.1. GC-состав является важной характеристикой геномных последовательностей и определяется как процентное
соотношение суммы всех гуанинов и цитозинов к общему числу нуклеиновых оснований в геномной последовательности.
Напишите программу, которая вычисляет процентное содержание символов G (гуанин) и C (цитозин) в введенной строке
(программа не должна зависеть от регистра вводимых символов).
Например, в строке "acggtgttat" процентное содержание символов G и C равно (4/10)*100 = 40.0, где 4 - это количество
символов G и C, а 10 - это длина строки.
2.4.2. Узнав, что ДНК не является случайной строкой, только что поступившие в Институт биоинформатики студенты
группы информатиков предложили использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.
Кодирование осуществляется следующим образом:
s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов исходной строки заменяются на этот
символ и количество его повторений в этой позиции строки.
Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом и выводит закодированную
последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.
2.5.1. Напишите программу, на вход которой подается одна строка с целыми числами. Программа должна вывести сумму
этих чисел.
Используйте метод split строки.
2.5.2. Напишите программу, на вход которой подаётся список чисел одной строкой. Программа должна для каждого
элемента этого списка вывести сумму двух его соседей. Для элементов списка, являющихся крайними, одним из соседей
считается элемент, находящий на противоположном конце этого списка. Например, если на вход подаётся список
"1 3 5 6 10", то на выход ожидается список "13 6 9 15 7" (без кавычек).
Если на вход пришло только одно число, надо вывести его же.
Вывод должен содержать одну строку с числами нового списка, разделёнными пробелом.
2.5.3. Напишите программу, которая принимает на вход список чисел в одной строке и выводит на экран в одну
строку значения, которые повторяются в нём более одного раза.
Для решения задачи может пригодиться метод sort списка.
Выводимые числа не должны повторяться, порядок их вывода может быть произвольным.
2.6.1. Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых
чисел не будет равна 0 и сразу после этого выводит сумму квадратов всех считанных чисел.
Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не
нужно.
В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим
сумму их квадратов, не обращая внимания на то, что остались ещё не прочитанные значения.

# TODO add 2.6.2-2.6.5

3.1.1. Напишите функцию f(x), которая возвращает значение следующей функции, определённой на всей числовой прямой:
        1-(x+2)**2, при х<=-2
f(x) =  -(x/2),     при -2<x<=2
        (x-2)**2+1, при 2<x
Требуется реализовать только функцию, решение не должно осуществлять операций ввода-вывода.
3.1.2. Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные
значения, а чётные нацело делит на два. Функция не должна ничего возвращать, требуется только изменение переданного
списка. Функция не должна осуществлять ввод/вывод информации.
3.2.1. Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: key
и value.
Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу.
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2 * key. Если и ключа 2 * key нет, то
нужно добавить ключ 2 * key в словарь и сопоставить ему список из переданного элемента [value].
Требуется реализовать только эту функцию, кода вне неё не должно быть.
Функция не должна вызывать внутри себя функции input и print.
3.2.2. Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой
книге.
Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и
вывести получившуюся статистику.
Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке
число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово﻿ должно выводиться только один раз.
3.2.3. Напишите программу, которая считывает строку с числом n, которое задаёт количество чисел, которые нужно считать.
Далее считывает n строк с числами x_i , по одному числу в каждой строке. Итого будет n+1 строк.
При считывании числа x_i программа должна на отдельной строке вывести значение f(x_i). Функция f(x) уже реализована и
доступна для вызова.
Функция вычисляется достаточно долго и зависит только от переданного аргумента x. Для того, чтобы уложиться в
ограничение по времени, нужно избежать повторного вычисления значений.